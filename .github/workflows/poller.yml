name: Poll YouTube snapshots

on:
  schedule:
    - cron: "*/15 * * * *"   # 15분마다(UTC)
  workflow_dispatch:          # 수동 실행 버튼

jobs:
  poll:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read

    # 모든 step에서 보이도록 시크릿을 job 레벨 env로 주입
    env:
      DATABASE_URL_DIRECT: ${{ secrets.DATABASE_URL_DIRECT }}
      YT_API_KEY: ${{ secrets.YT_API_KEY }}
      SUPABASE_CA: ${{ secrets.SUPABASE_CA }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: npm

      - run: npm ci

      # 수동 실행 때만 진단 출력
      - name: Debug (manual only)
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |
          echo "DB URL len: ${#DATABASE_URL_DIRECT}"
          node -e "const u=process.env.DATABASE_URL_DIRECT||''; console.log('DB host:', (u.match(/@([^:/?]+)/)||[])[1]||'EMPTY');"
          echo "CA len: ${#SUPABASE_CA}"

      # Direct(5432) + CA로 스모크 테스트
      - name: DB smoke test
        run: |
          node - <<'NODE'
          const { Pool } = require('pg');
          const { parse } = require('pg-connection-string');

          const url = process.env.DATABASE_URL_DIRECT;
          if (!url) { console.error('DATABASE_URL_DIRECT missing'); process.exit(1); }

          const cfg = parse(url);
          const host = (cfg.host || '').toLowerCase();
          console.log('DB host:', host);

          const ca = process.env.SUPABASE_CA;
          if (!ca) { console.error('SUPABASE_CA missing'); process.exit(1); }

          const ssl = { ca };  // Direct는 반드시 CA로 검증

          (async () => {
            try {
              const p = new Pool({ connectionString: url, ssl });
              const r = await p.query('select now()');
              console.log('DB now:', r.rows[0]);
              await p.end();
            } catch (e) {
              console.error(e);
              process.exit(1);
            }
          })();
          NODE

      - name: Run poller
        run: node poll.js
